{"version":3,"sources":["logo.svg","components/TableRow.jsx","components/TableElement.jsx","components/TableHeader.jsx","components/Table.jsx","components/Button.jsx","components/PageSelector.jsx","components/PagedTable.jsx","components/SiteContainer.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","StyledTableRow","styled","div","TableRow","this","props","children","Component","StyledTableElement","TableElement","StyledTableHeader","TableHeader","StyledTableContainer","Table","elements","map","element","i","key","name","numeral","watchers","format","open_issues_count","forks","StyledButton","Button","type","className","onClick","StyledPageSelector","PageSelector","Array","amountOfPages","keys","items","idx","selectedPage","handleSiteChange","PagedTable","state","elementsPerPage","failedFetchAttempt","setState","fetch","then","response","json","data","error","console","length","slice","elementPerPage","StyledSiteContainer","SiteContainer","StyledApp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e39968fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\n\nimport styled from 'styled-components';\n\nconst StyledTableRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    text-align: center;\n    background-color: lightgrey;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n    margin-bottom: 10px;\n    min-height: 30px;\n    align-items: center;\n`\n\nclass TableRow extends Component {\n\n    render() {\n        return (\n            <StyledTableRow>\n                {this.props.children} \n            </StyledTableRow>\n        );\n    }\n}\n\nexport default TableRow;","import React, { Component } from 'react';\n\n\nimport styled from 'styled-components';\n\nconst StyledTableElement = styled.div`\n    display: flex;\n    justify-content: center;\n    width:25%;\n    padding: 10px;\n`\n\nclass TableElement extends Component {\n    render() {\n        return (\n            <StyledTableElement>\n                {this.props.children}\n            </StyledTableElement>\n        );\n    }\n}\n\nexport default TableElement;","import React, { Component } from 'react';\n\n\nimport styled from 'styled-components';\n\nconst StyledTableHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    text-align: center;\n    margin-bottom: 13px;\n    min-height: 30px;\n    font-weight:bold;\n    border-bottom: 1.5px solid black;\n    background-color: \"#f1f1f1\";\n    text-shadow: 1px 1px lightgray;\n`\nclass TableHeader extends Component {\n    render() { \n        return ( \n            <StyledTableHeader>\n                {this.props.children}\n            </StyledTableHeader>\n        );\n    }\n}\n\nexport default TableHeader;","import React, { Component } from 'react';\n\nimport TableRow from './TableRow'\nimport TableElement from './TableElement'\nimport TableHeader from './TableHeader'\n\nimport numeral from 'numeral'\n\nimport styled from 'styled-components';\n\nconst StyledTableContainer = styled.div`\n    display:flex;\n    justify-content: center;\n    flex-direction: column;\n    padding: 2% 10%;\n\n`\n\nclass Table extends Component {\n    render() {\n        return (\n            <StyledTableContainer>\n                <TableHeader>\n                    <TableElement>Name</TableElement>\n                    <TableElement>Stars</TableElement>\n                    <TableElement>Open Issues</TableElement>\n                    <TableElement>Forks</TableElement>\n                </TableHeader>\n                {this.props.elements.map((element, i) => {\n                    return (\n                        <TableRow key={i}>\n                            <TableElement>{element.name}</TableElement>\n                            <TableElement>{numeral(element.watchers).format('0,0')}</TableElement>\n                            <TableElement>{element.open_issues_count}</TableElement>\n                            <TableElement>{numeral(element.forks).format('0,0')}</TableElement>\n                        </TableRow>\n                    )\n                })}\n            </StyledTableContainer>\n        );\n    }\n}\n\nexport default Table;","import React, { Component } from 'react';\n\nimport styled from 'styled-components';\n\nconst StyledButton = styled.div`\n    display: flex;\n    justify-content: center;\n    padding-bottom:20px;\n\n    .btn{\n        margin: 10px;\n        border-radius: 2px;\n        border-width: 0;\n        outline: none;\n        overflow: hidden;\n        padding: 0.5em 1em;\n    }\n\n    .selected {\n        box-shadow: 0 1px 4px;\n        color:white;\n        background-color: black;\n    }\n\n    .btn:hover{\n        background-color: gray;\n        color:white;\n    }\n`\n\n\nclass Button extends Component {\n\n    render() {\n        return (\n            <StyledButton>\n            {\n                this.props.type === \"selected\" ?\n                    <button type=\"button\" className=\"btn selected\" onClick={() => this.props.onClick()}>\n                        {this.props.children}\n                    </button> :\n                    <button type=\"button\" className=\"btn\" onClick={() => this.props.onClick()}>\n                        {this.props.children}\n                    </button>\n                }\n            </StyledButton>)\n    }\n}\n\nexport default Button;","import React, { Component } from 'react';\n\nimport Button from './Button.jsx'\n\nimport styled from 'styled-components';\n\nconst StyledPageSelector = styled.div`\n    display: flex;\n    justify-content: center;\n    padding-bottom:20px;\n`\n\nclass PageSelector extends Component {\n    render() {\n        return (\n            <StyledPageSelector>\n                {[...Array(this.props.amountOfPages).keys()].map((items, idx) => {\n                    return (\n                        this.props.selectedPage === idx ?\n                            <Button onClick={() => this.props.handleSiteChange(idx)} type=\"selected\" key={idx}>\n                                {idx + 1}\n                            </Button> :\n                            <Button onClick={() => this.props.handleSiteChange(idx)} key={idx}>\n                                {idx + 1}\n                            </Button>)\n                })}\n            </StyledPageSelector>);\n    }\n}\n\nexport default PageSelector;","import React, { Component } from 'react';\nimport Table from './Table.jsx'\nimport PageSelector from './PageSelector.jsx'\n\n\nclass PagedTable extends Component {\n    state = {\n        selectedPage: 0,\n        elementsPerPage: 20,\n        amountOfPages: 5,\n        elements: [],\n        failedFetchAttempt: false,\n    }\n\n    componentDidMount() {\n        // Should be moved to a separate file for cleaner code.\n        try {\n            fetch(\"https://api.github.com/search/repositories?q=language:javascript&sort=stars&order=desc&per_page=100\")\n                .then(response => response.json())\n                .then(data => this.setState({ elements: data.items }));\n        } catch (error) {\n            //User should be informed of a failed fetch attempt.\n            this.setState({\n                failedFetchAttempt: true\n            })\n            console.error(error);\n        }\n    }\n\n    handleSiteChange = (i) => {\n        this.setState({\n            selectedPage: i\n        });\n    }\n\n    render() {\n        return (\n            this.state.failedFetchAttempt === false ?\n                this.state.elements.length !== 0 ?\n                    <div>\n                        <Table elements={\n                            this.state.elements.slice(\n                                this.state.elementsPerPage * (this.state.selectedPage),\n                                this.state.elementsPerPage * (this.state.selectedPage + 1))}>\n                        </Table>\n                        <PageSelector\n                            elementPerPage={this.state.elementsPerPage}\n                            amountOfPages={this.state.amountOfPages}\n                            selectedPage={this.state.selectedPage}\n                            handleSiteChange={this.handleSiteChange}>\n                        </PageSelector>\n                    </div> :\n                    <div>\n                        Loading table content...\n                    </div> :\n                <div>\n                    Failed to load table data.\n                </div>\n        );\n    }\n}\n\nexport default PagedTable;","import React, { Component } from 'react';\nimport PagedTable from './PagedTable.jsx';\n\nimport styled from 'styled-components';\n\nconst StyledSiteContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    header{\n        height: 20%;\n    }\n\n    .pagedTableContainer{\n        height:80%;\n    }\n`\n\nclass SiteContainer extends Component {\n    \n    render() { \n        return ( \n            <StyledSiteContainer>\n                <header>\n                    {/**\n                    Text should not be hard coded. Resource.\n                     */}\n                    <h1>\n                        Top Github JavaScript Repositories\n                    </h1>\n                </header>\n                <div className=\"pagedTableContainer\">\n                    <PagedTable>\n\n                    </PagedTable>\n                </div>\n            </StyledSiteContainer>\n        );\n    }\n}\n\nexport default SiteContainer;","import React from 'react';\nimport logo from '../logo.svg';\nimport SiteContainer from './SiteContainer.jsx'\n\nimport styled from 'styled-components';\n\nconst StyledApp = styled.div`\n    margin-top: 70px;\n    text-align: center;\n`\n\nfunction App() {\n  return (\n    <StyledApp className=\"App\">\n      <SiteContainer>\n\n      </SiteContainer>\n    </StyledApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}